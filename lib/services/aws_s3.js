// Generated by CoffeeScript 1.7.1
(function() {
  var access_key_id, aws, heroku, secret_access_key;

  aws = require('aws-sdk');

  heroku = require('../../etc/heroku');

  access_key_id = heroku.config.aws.access_key_id;

  secret_access_key = heroku.config.aws.secret_access_key;

  aws.config.update({
    accessKeyId: access_key_id,
    secretAccessKey: secret_access_key
  });

  exports.awsTransferUpload = function(options, done) {
    var params, s3;
    if (!options) {
      throw "no required options";
    }
    try {
      s3 = new aws.S3({
        apiVersion: '2006-03-01'
      });
      params = {
        Bucket: options.bucket,
        Key: options.key,
        Body: options.body
      };
      return s3.putObject(params, function(err, data) {
        return done(err, data);
      });
    } catch (_error) {}
  };

  exports.awsGetObject = function(options, done) {
    var params, s3;
    if (!options) {
      throw "no required options";
    }
    try {
      s3 = new aws.S3({
        apiVersion: '2006-03-01'
      });
      params = {
        Bucket: options.bucket,
        Key: options.key
      };
      return s3.getObject(params, function(err, data) {
        return done(err, data);
      });
    } catch (_error) {}
  };

  exports.awsMoveObject = function(options, done) {
    var error, params, s3;
    if (!options) {
      throw "no required options";
    }
    try {
      s3 = new aws.S3({
        apiVersion: '2006-03-01'
      });
      params = {
        Bucket: options.des_bucket,
        CopySource: options.source_path,
        Key: options.des_key
      };
      return s3.copyObject(params, function(err, data) {
        var p;
        if (err != null) {
          return done(err, null);
        } else {
          p = {
            Bucket: options.del_bucket,
            Key: options.del_key
          };
          return s3.deleteObject(p, function(err, data) {
            return done(err, 'moved');
          });
        }
      });
    } catch (_error) {
      error = _error;
      return done(error, null);
    }
  };

}).call(this);
