// Generated by CoffeeScript 1.7.1
(function() {
  var amqp, config, errorQ, handlers, heroku, ingestorQ, process_msgs, rabbit, rabbitMQ;

  amqp = require('amqplib/callback_api');

  rabbit = require('./send');

  config = require("../../config.coffee").config();

  heroku = require('../../../etc/heroku');

  ingestorQ = heroku.config.rabbitMq.ingestorQ;

  errorQ = heroku.config.rabbitMq.errorQ;

  rabbitMQ = heroku.config.rabbitMq.connect;

  handlers = {
    'INGESTOR': require('../msg_handlers/ingestors'),
    'ERRORS': require('../msg_handlers/error')
  };

  process_msgs = function(msg, cb) {
    var er_msg, error, m, msg_handler;
    try {
      console.log('-------------- Processing MSG --------------------');
      m = JSON.parse(msg.content.toString());
      msg_handler = handlers[m.service.toUpperCase()];
      if (msg_handler != null) {
        return handlers[m.service.toUpperCase()].run(m, function(err, r) {
          return cb(err, r);
        });
      } else {
        console.log(' ***  no msg handler available for service: ' + m.service.toString());
        er_msg = 'No msg handler available for service: ' + m.service.toString();
        return cb(er_msg, null);
      }
    } catch (_error) {
      error = _error;
      console.log(error);
      return cb(error, null);
    }
  };

  exports.receive_msg = function(que, done) {
    var error;
    try {
      console.log('Connecting to que: ' + que + ' @ ' + rabbitMQ);
      return amqp.connect(rabbitMQ, function(err, conn) {
        if (err != null) {
          console.log(err);
          return done(err, null);
        } else {
          return conn.createChannel(function(err, ch) {
            if (err != null) {
              console.log(err);
              return done(err, null);
            } else {
              ch.assertQueue(que, {
                durable: true
              });
              ch.prefetch(1);
              console.log(" ** Waiting for messages in %s Queue", que);
              return ch.consume(que, (function(msg) {
                console.log('------------- NEW MSG -------------------');
                console.log(msg.content.toString());
                return process_msgs(msg, function(err, re) {
                  if (err != null) {
                    console.log(err);
                    return ch.ack(msg);
                  } else {
                    return ch.ack(msg);
                  }
                });
              }));
            }
          });
        }
      });
    } catch (_error) {
      error = _error;
      return done(error, null);
    }
  };

}).call(this);
