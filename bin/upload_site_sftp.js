// Generated by CoffeeScript 1.7.1
(function() {
  var async, bs, config, config_path, fs, heroku, path, sfpt_service, upload;

  bs = require('../lib/bootstrap');

  fs = require('fs');

  path = require('path');

  heroku = require('../etc/heroku');

  async = require('async');

  sfpt_service = require('../lib/services/sftp-service');

  config_path = path.join(__dirname, '..', 'etc', 'dev.json');

  config = JSON.parse(fs.readFileSync(config_path, 'utf-8'));

  upload = function() {
    return bs.setup(config, function(err, db) {
      console.log('get the bootstrap done');
      if (err != null) {
        return console.log(err);
      } else {
        return db.rows("select * from core.sites s join core.site_sftp_setting ss on s.id = ss.site_id where ss.disabled is not true", [], function(err, rows) {
          var file_transfer;
          if (err != null) {
            console.log(err);
          } else {
            console.log(rows);
          }
          file_transfer = function(site, done) {
            var s;
            console.log('Starting file transfer for site: ' + site.name + ' site id: ' + site.id);
            s = {
              id: site.id,
              name: site.name,
              client_id: site.client_id,
              pos: site.pos,
              sftp: {
                host: site.r_host,
                port: site.port,
                username: site.username,
                password: site.password,
                source: site.source_dir,
                validation: site.file_type
              }
            };
            return sfpt_service.get_sftp_files(s, function(err, results) {
              if (err != null) {
                done(null, 'ok');
                return console.log(err);
              } else {
                return done(null, results);
              }
            });
          };
          return async.eachLimit(rows, heroku.config.parallel.uploadSites, file_transfer, function(err, res) {
            console.log('file upload process complete');
            if (err != null) {
              console.log('this is main function');
              return console.log(err);
            } else {
              return setTimeout(upload, 45000);
            }
          });
        });
      }
    });
  };

  upload();

}).call(this);
